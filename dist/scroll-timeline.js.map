{"version":3,"file":"scroll-timeline.js","sources":["../src/utils.js","../src/scroll-timeline-base.js","../src/intersection-based-offset.js","../src/scroll-timeline.js"],"sourcesContent":["export function parseLength(str) {\n  let matches = str.trim().match(/^(-?[0-9]*\\.?[0-9]*)(px|%)$/);\n  if( matches ) {\n    return {\n      value: matches[1],\n      unit: matches[2],\n    }\n  }\n  return null\n}","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {parseLength} from './utils';\n\nlet scrollTimelineOptions = new WeakMap();\n\nfunction scrollEventSource(scrollSource) {\n  if (scrollSource === document.scrollingElement)\n    return document;\n  return scrollSource;\n}\n\nexport function calculateTargetEffectEnd(options) {\n  if (options.iterationCount === Infinity)\n    return Infinity;\n  return Math.max((options.startDelay || 0) + (options.duration || 0) * (options.iterationCount || 1) + (options.endDelay || 0), 0);\n}\n\nlet extensionScrollOffsetFunctions = [];\n\nexport function installScrollOffsetExtension(parseFunction, evaluateFunction) {\n  extensionScrollOffsetFunctions.push({\n    parse: parseFunction,\n    evaluate: evaluateFunction\n  });\n  return extensionScrollOffsetFunctions\n}\n\nexport function calculateMaxScrollOffset(scrollSource, orientation) {\n  // TODO: Support other writing directions.\n  if (orientation === 'block')\n    orientation = 'vertical';\n  else if (orientation === 'inline')\n    orientation = 'horizontal';\n  if (orientation === 'vertical')\n    return scrollSource.scrollHeight - scrollSource.clientHeight;\n  else if (orientation === 'horizontal')\n    return scrollSource.scrollWidth - scrollSource.clientWidth;\n\n}\n\nexport function calculateScrollOffset(autoValue, scrollSource, orientation, offset, fn) {\n  if (fn)\n    return fn(scrollSource, orientation, offset, autoValue === '0%' ? 'start' : 'end');\n  // TODO: Support other writing directions.\n  if (orientation === 'block')\n    orientation = 'vertical';\n  else if (orientation === 'inline')\n    orientation = 'horizontal';\n\n  let maxValue = orientation === 'vertical' ?\n    scrollSource.scrollHeight - scrollSource.clientHeight :\n    scrollSource.scrollWidth - scrollSource.clientWidth;\n  let parsed = parseLength(offset === 'auto' ? autoValue : offset);\n  if (parsed.unit === '%')\n    return parseFloat(parsed.value) * maxValue / 100;\n  return parseFloat(parsed.value);\n}\n\nfunction calculateTimeRange(scrollTimeline) {\n  let timeRange = scrollTimeline.timeRange;\n  if (timeRange === 'auto') {\n    timeRange = 0;\n    let options = scrollTimelineOptions.get(scrollTimeline).animationOptions;\n    for (let i = 0; i < options.length; i++) {\n      timeRange = Math.max(timeRange, calculateTargetEffectEnd(options[i]));\n    }\n    if (timeRange === Infinity)\n      timeRange = 0;\n  }\n  return timeRange;\n}\n\nfunction updateInternal() {\n  let animations = scrollTimelineOptions.get(this).animations;\n  if (animations.length === 0)\n    return;\n  let currentTime = this.currentTime;\n  for (let i = 0; i < animations.length; i++) {\n    // The web-animations spec says to throw a TypeError if you try to seek to\n    // an unresolved time value from a resolved time value, so to polyfill the\n    // expected behavior we cancel the underlying animation.\n    if (currentTime == null) {\n      if (animations[i].playState === 'paused')\n        animations[i].cancel();\n    } else {\n      animations[i].currentTime = currentTime;\n    }\n  }\n}\n\nexport function addAnimation(scrollTimeline, animation, options) {\n  let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n  let animationOptions = scrollTimelineOptions.get(scrollTimeline).animationOptions;\n  animations.push(animation);\n  animationOptions.push(options);\n  updateInternal.apply(scrollTimeline);\n}\n\n//unused\n// function removeAnimation(scrollTimeline, animation) {\n//   let animations = scrollTimelineOptions.get(scrollTimeline).animations;\n//   let index = animations.indexOf(animation);\n//   if (index === -1)\n//     return;\n//   animations.splice(index, 1);\n//   scrollTimelineOptions.get(scrollTimeline).animationOptions.splice(index, 1);\n// }\n\nexport class ScrollTimeline {\n  constructor(options) {\n    scrollTimelineOptions.set(this, {\n      scrollSource: null,\n      orientation: 'block',\n      startScrollOffset: 'auto',\n      endScrollOffset: 'auto',\n      timeRange: 'auto',\n      fill: 'none',\n\n      // Internal members\n      animations: [],\n      animationOptions: [],\n      updateFunction: updateInternal.bind(this),\n    });\n    this.scrollSource = options && options.scrollSource || document.scrollingElement;\n    this.orientation = options && options.orientation || 'block';\n    this.startScrollOffset = options && options.startScrollOffset || 'auto';\n    this.endScrollOffset = options && options.endScrollOffset || 'auto';\n    this.timeRange = options && options.timeRange || 'auto';\n    this.fill = options && options.fill || 'none';\n    this.__polyfill = true;\n  }\n\n  set scrollSource(element) {\n    let internal = scrollTimelineOptions.get(this);\n    if (this.scrollSource)\n      scrollEventSource(this.scrollSource).removeEventListener('scroll', internal.updateFunction);\n    if (!(element instanceof Element))\n      element = document.scrollingElement;\n    scrollTimelineOptions.get(this).scrollSource = element;\n    scrollEventSource(element).addEventListener('scroll', internal.updateFunction);\n    updateInternal.apply(this);\n  }\n\n  get scrollSource() {\n    return scrollTimelineOptions.get(this).scrollSource;\n  }\n\n  set orientation(orientation) {\n    if (['block', 'inline', 'horizontal', 'vertical'].indexOf(orientation) === -1)\n      orientation = 'block';\n    scrollTimelineOptions.get(this).orientation = orientation;\n    updateInternal.apply(this);\n  }\n\n  get orientation() {\n    return scrollTimelineOptions.get(this).orientation;\n  }\n\n  set startScrollOffset(offset) {\n    // Allow extensions to override scroll offset calculation.\n    scrollTimelineOptions.get(this).startScrollOffsetFunction = null;\n    for (let i = 0; i < extensionScrollOffsetFunctions.length; i++) {\n      let result = extensionScrollOffsetFunctions[i].parse(offset);\n      if (result !== undefined) {\n        offset = result;\n        scrollTimelineOptions.get(this).startScrollOffsetFunction = extensionScrollOffsetFunctions[i].evaluate;\n        break;\n      }\n    }\n    scrollTimelineOptions.get(this).startScrollOffset = offset;\n    updateInternal.apply(this);\n  }\n\n  get startScrollOffset() {\n    return scrollTimelineOptions.get(this).startScrollOffset;\n  }\n\n  set endScrollOffset(offset) {\n    // Allow extensions to override scroll offset calculation.\n    scrollTimelineOptions.get(this).endScrollOffsetFunction = null;\n    for (let i = 0; i < extensionScrollOffsetFunctions.length; i++) {\n      let result = extensionScrollOffsetFunctions[i].parse(offset);\n      if (result !== undefined) {\n        offset = result;\n        scrollTimelineOptions.get(this).endScrollOffsetFunction = extensionScrollOffsetFunctions[i].evaluate;\n        break;\n      }\n    }\n    scrollTimelineOptions.get(this).endScrollOffset = offset;\n    updateInternal.apply(this);\n  }\n\n  get endScrollOffset() {\n    return scrollTimelineOptions.get(this).endScrollOffset;\n  }\n\n  set timeRange(offset) {\n    scrollTimelineOptions.get(this).timeRange = offset;\n    updateInternal.apply(this);\n  }\n\n  get timeRange() {\n    return scrollTimelineOptions.get(this).timeRange;\n  }\n\n  get currentTime() {\n    // Per https://wicg.github.io/scroll-animations/#current-time-algorithm\n    // Step 1\n    let unresolved = null;\n    if (!this.scrollSource)\n      return unresolved;\n    let startOffset = calculateScrollOffset('0%', this.scrollSource, this.orientation, this.startScrollOffset, scrollTimelineOptions.get(this).startScrollOffsetFunction);\n    let endOffset = calculateScrollOffset('100%', this.scrollSource, this.orientation, this.endScrollOffset, scrollTimelineOptions.get(this).endScrollOffsetFunction);\n    let timeRange = calculateTimeRange(this);\n\n    // Step 2\n    let currentScrollOffset = this.scrollSource.scrollTop;\n\n    // Step 3\n    if (currentScrollOffset < startOffset) {\n      if (this.fill === 'none' || this.fill === 'forwards')\n        return unresolved;\n      return 0;\n    }\n\n    // Step 4\n    if (currentScrollOffset >= endOffset) {\n      if (endOffset < calculateMaxScrollOffset(this.scrollSource, this.orientation) &&\n        (this.fill === 'none' || this.fill === 'backwards')) {\n        return unresolved;\n      }\n      return timeRange;\n    }\n\n    // Step 5\n    return (currentScrollOffset - startOffset) / (endOffset - startOffset) * timeRange;\n  }\n}","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {parseLength} from './utils';\n\nlet IntersectionOptions = new WeakMap();\n\n// Margin is stored as a 4 element array [top, right, bottom, left] but can be\n// specified using anywhere from 1 - 4 elements. This map defines how to convert\n// various length inputs to their components.\nconst TOP = 0;\nconst RIGHT = 1;\nconst BOTTOM = 2;\nconst LEFT = 3;\nconst MARGIN_MAP = [\n  // 1 length maps to all positions.\n  [[TOP, RIGHT, BOTTOM, LEFT]],\n  // 2 lengths maps to vertical and horizontal margins.\n  [[TOP, BOTTOM], [RIGHT, LEFT]],\n  // 3 lengths maps to top, horizontal, bottom margins.\n  [[TOP], [RIGHT, LEFT], [BOTTOM]],\n  // 4 lengths maps to each component.\n  [[TOP], [RIGHT], [BOTTOM], [LEFT]]];\n\nclass IntersectionBasedOffset {\n  constructor(value) {\n    IntersectionOptions.set(this, {\n      target: null,\n      edge: 'start',\n      threshold: 0,\n      rootMargin: [[0, 'px'], [0, 'px'], [0, 'px'], [0, 'px']],\n    });\n    this.target = value.target;\n    this.edge = value.edge || 'start';\n    this.threshold = value.threshold || 0;\n    this.rootMargin = value.rootMargin || '0px 0px 0px 0px';\n    this.clamp = value.clamp || false;\n  }\n\n  set target(element) {\n    if (!(element instanceof Element)) {\n      IntersectionOptions.get(this).target = null;\n      throw Error('Intersection target must be an element.');\n    }\n    IntersectionOptions.get(this).target = element;\n  }\n\n  get target() {\n    return IntersectionOptions.get(this).target;\n  }\n\n  set edge(value) {\n    if (['start', 'end'].indexOf(value) == -1)\n      return;\n    IntersectionOptions.get(this).edge = value;\n  }\n\n  get edge() {\n    return IntersectionOptions.get(this).edge;\n  }\n\n  set threshold(value) {\n    let threshold = parseFloat(value);\n    // Throw a RangeError for out of range threshold:\n    // https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n    if (threshold < 0 || threshold > 1)\n      throw RangeError('threshold must be in the range [0, 1]');\n    IntersectionOptions.get(this).threshold = threshold;\n  }\n\n  get threshold() {\n    return IntersectionOptions.get(this).threshold;\n  }\n\n  set rootMargin(value) {\n    let margins = value.split(/ +/)\n    if (margins.length < 1 || margins.length > 4)\n      throw TypeError('rootMargin must contain between 1 and 4 length components');\n    let parsedMargins = [[], [], [], []];\n    for (let i = 0; i < margins.length; i++) {\n      let parsedValue = parseLength(margins[i]);\n      if (!parsedValue)\n        throw TypeError('Unrecognized rootMargin length');\n      let positions = MARGIN_MAP[margins.length - 1][i];\n      for (let j = 0; j < positions.length; j++) {\n        parsedMargins[positions[j]] = [parseFloat(parsedValue.value), parsedValue.unit];\n      }\n    }\n    IntersectionOptions.get(this).rootMargin = parsedMargins;\n  }\n\n  get rootMargin() {\n    // TODO: Simplify to the shortest matching specification for the given margins.\n    return IntersectionOptions.get(this).rootMargin.map(\n      (margin) => {\n        return margin.join('');\n      }).join(' ');\n  }\n\n  set clamp(value) {\n    // This is just for testing alternative proposals - not intended to be part\n    // of the specification.\n    IntersectionOptions.get(this).clamp = !!value;\n  }\n};\n\nexport function parseOffset(value) {\n  if (value.target)\n    return new IntersectionBasedOffset(value);\n}\n\nfunction resolveLength(length, containerSize) {\n  if (length[1] == '%')\n    return length[0] * containerSize / 100;\n  // Assumption is only px or % will be passed in.\n  // TODO: Support other length types (e.g. em, vh, etc).\n  return length[0];\n}\n\nexport function calculateOffset(scrollSource, orientation, offset, startOrEnd) {\n  // TODO: Support other writing directions.\n  if (orientation == 'block')\n    orientation = 'vertical';\n  else if (orientation == 'inline')\n    orientation = 'horizontal';\n  let originalViewport = scrollSource == document.scrollingElement ?\n    {\n      left: 0, right: scrollSource.clientWidth,\n      top: 0, bottom: scrollSource.clientHeight,\n      width: scrollSource.clientWidth, height: scrollSource.clientHeight\n    } :\n    scrollSource.getBoundingClientRect();\n\n  // Resolve margins and offset viewport.\n  let parsedMargins = IntersectionOptions.get(offset).rootMargin;\n  let computedMargins = [];\n  for (let i = 0; i < 4; i++) {\n    computedMargins.push(resolveLength(parsedMargins[i], (i % 2 == 0 ? originalViewport.height : originalViewport.width)));\n  }\n  let viewport = {\n    left: originalViewport.left - computedMargins[LEFT],\n    right: originalViewport.right + computedMargins[RIGHT],\n    width: originalViewport.right - originalViewport.left + computedMargins[LEFT] + computedMargins[RIGHT],\n    top: originalViewport.top - computedMargins[TOP],\n    bottom: originalViewport.bottom + computedMargins[BOTTOM],\n    height: originalViewport.bottom - originalViewport.top + computedMargins[TOP] + computedMargins[BOTTOM],\n  }\n\n  let clamped = IntersectionOptions.get(offset).clamp;\n  let target = offset.target.getBoundingClientRect();\n  let threshold = offset.threshold;\n  // Invert threshold for start position.\n  if (offset.edge == 'start')\n    threshold = 1 - threshold;\n  // Projected point into the scroller scroll range.\n  if (orientation == 'vertical') {\n    let point = target.top + target.height * threshold - viewport.top + scrollSource.scrollTop;\n    if (clamped) {\n      if (offset.edge == 'end')\n        return Math.max(0, point - viewport.height);\n      return Math.min(point, scrollSource.scrollHeight - viewport.height);\n    } else {\n      if (offset.edge == 'end')\n        return point - viewport.height;\n      return point;\n    }\n  } else { // orientation == 'horizontal'\n    let point = target.left + target.width * threshold - viewport.left + scrollSource.scrollLeft;\n    if (clamped) {\n      if (offset.edge == 'end')\n        return Math.max(0, point - viewport.width);\n      return Math.min(point, scrollSource.scrollWidth - viewport.width);\n    } else {\n      if (offset.edge == 'end')\n        return point - viewport.width;\n      return point;\n    }\n  }\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ScrollTimeline, installScrollOffsetExtension, addAnimation } from \"./scroll-timeline-base\";\nimport {calculateOffset, parseOffset} from \"./intersection-based-offset\";\n\nconst nativeElementAnimate = window.Element.prototype.animate;\n\nconst animate = function (keyframes, options) {\n  let timeline = options.timeline;\n  if (!timeline || !(timeline instanceof ScrollTimeline)) {\n    return nativeElementAnimate.apply(this, arguments);\n  }\n  delete options.timeline;\n  let animation = nativeElementAnimate.apply(this, arguments);\n  // TODO: Create a proxy for the animation to control and fake the animation\n  // play state.\n  animation.pause();\n  addAnimation(timeline, animation, options);\n  return animation;\n};\n\ninstallScrollOffsetExtension(parseOffset, calculateOffset);\n\nif (!Reflect.defineProperty(window, 'ScrollTimeline', {value: ScrollTimeline})) {\n  throw Error(\"Error installing ScrollTimeline polyfill: could not attach ScrollTimeline to window\")\n}\n\nif (!Reflect.defineProperty(Element.prototype, 'animate', {value: animate})) {\n  throw Error(\"Error installing ScrollTimeline polyfill: could not attach WAAPI's animate to DOM Element\")\n}\n"],"names":["parseLength","str","matches","trim","match","value","unit","scrollTimelineOptions","WeakMap","scrollEventSource","scrollSource","document","scrollingElement","calculateTargetEffectEnd","options","Infinity","iterationCount","Math","max","startDelay","duration","endDelay","extensionScrollOffsetFunctions","calculateScrollOffset","autoValue","orientation","offset","fn","maxValue","scrollHeight","clientHeight","scrollWidth","clientWidth","parsed","parseFloat","updateInternal","animations","get","this","length","currentTime","i","playState","cancel","addAnimation","scrollTimeline","animation","animationOptions","push","apply","ScrollTimeline","set","startScrollOffset","endScrollOffset","timeRange","fill","updateFunction","bind","__polyfill","_createClass","element","internal","removeEventListener","Element","addEventListener","indexOf","startScrollOffsetFunction","result","parse","undefined","evaluate","endScrollOffsetFunction","startOffset","endOffset","calculateTimeRange","currentScrollOffset","scrollTop","IntersectionOptions","MARGIN_MAP","IntersectionBasedOffset","target","edge","threshold","rootMargin","clamp","Error","RangeError","margins","split","TypeError","parsedMargins","parsedValue","positions","j","map","margin","join","nativeElementAnimate","window","prototype","animate","startOrEnd","originalViewport","left","right","top","bottom","width","height","getBoundingClientRect","computedMargins","viewport","clamped","point","min","scrollLeft","Reflect","defineProperty","keyframes","timeline","arguments","pause"],"mappings":"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"}